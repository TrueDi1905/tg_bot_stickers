import io
import asyncio
import random
import re

from pyrogram import Client
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from sqlalchemy import select
from sqlalchemy.orm import Session

from bot_tg import dp
from image_editor import photo_remove_bg, photo_resize
from keyboard import start_menu_keyboard, \
    back_to_menu_keyboard, photo_choice_keyboard, pack_keyboard, pack_choice, none_pack
from smiles import send_smile
from models import engine, Users, Stickers


class FSMAdmin(StatesGroup):
    photo = State()
    photo_background = State()
    pack = State()
    stick_create = State()


session = Session(bind=engine)


async def send_welcome(message: types.Message):
    text = '–ñ–µ–ª–∞–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä?'
    await message.answer(text, reply_markup=start_menu_keyboard)


@dp.message_handler(state='*', commands='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
@dp.message_handler(Text(equals='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    await send_welcome(message)


@dp.message_handler(content_types=['text'], text='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä', state=None)
async def create_stickers(message: types.Message):
    await FSMAdmin.photo.set()
    text = '–ó–∞—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ'
    await message.answer(text, reply_markup=back_to_menu_keyboard)


@dp.message_handler(content_types=['text'], text='–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã', state=None)
async def my_stickers(message: types.Message):
    get_stickers = engine.execute(
        select([Stickers.stickers_tg]).where(Stickers.tg_users ==
                                             message.from_user.id)).fetchall()
    url = 'https://t.me/addstickers/'
    await message.answer('–í–∞—à–∏ —Å—Ç–∏–∫–µ—Ä—ã üëá')
    for i in get_stickers:
        await message.answer(url + "".join(i),
                             reply_markup=back_to_menu_keyboard)


@dp.message_handler(content_types=['photo', 'document'], state=FSMAdmin.photo)
async def load_photo(message: types.Message, state: FSMContext):
    if message.document:
        text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É ' \
               '¬´–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ¬ª –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ'
        await message.answer(text)
        return
    image_download = io.BytesIO()
    await message.photo[-1].download(image_download)
    new_photo = photo_resize(image_download)
    async with state.proxy() as data:
        data['photo'] = new_photo
    await FSMAdmin.next()
    text = '–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–Ω–∏–π —Ñ–æ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?'
    await message.answer(text,
                         reply_markup=photo_choice_keyboard)


@dp.message_handler(state=FSMAdmin.photo_background)
async def choice_background(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == '–£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω':
            text = '–ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å'
            await message.answer(text)
            background = photo_remove_bg(data['photo'])
            data['photo_background'] = True
            data['photo'] = background
        else:
            data['photo_background'] = False
    await FSMAdmin.next()
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∏–∫–µ—Ä'
    await message.answer(text, reply_markup=pack_keyboard)


@dp.message_handler(state=FSMAdmin.pack)
async def choice_pack(message: types.Message, state: FSMContext):
    if message.text == '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞–∫':
        text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤'
        async with state.proxy() as data:
            data['pack'] = 'new'
        await message.answer(text)
        await FSMAdmin.next()
    else:
        get_user = engine.execute(
            select([Stickers.stickers_tg]).where(Stickers.tg_users ==
                                                 message.from_user.id)).fetchall()
        if len(get_user) == 0:
            await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞–∫–æ–≤', reply_markup=none_pack)
            return
        packs = pack_choice(get_user)
        async with state.proxy() as data:
            data['pack'] = 'old'
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫', reply_markup=packs)
        await FSMAdmin.next()


app = Client("my_account")
@dp.message_handler(state=FSMAdmin.stick_create)
async def stick_create(message: types.Message, state: FSMContext):
    if len(message.text) < 5:
        await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 5 –±—É–∫–≤')
        return
    if re.search(r'[–∞-—è–ê-–Ø]', message.text):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º')
        return
    await message.answer('–ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å')
    if 1==1:
        if app.session is not None:
            await asyncio.sleep(9)
            if app.session is not None:
                await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø–æ—ã—Ç–∫—É –ø–æ–∑–∂–µ')
        stick_name = ''
        text_create = ''
        async with state.proxy() as data:
            if data['pack'] == 'old':
                stick_name = message.text
                text_create = '/addsticker'
            else:
                text_create = '/newpack'
                stick_name = message.text
        await app.start()
        await app.send_message("@Stickers", text_create)
        await asyncio.sleep(1)
        await app.send_message("@Stickers", stick_name)
        await asyncio.sleep(1)
        async with state.proxy() as data:
            await app.send_document("@Stickers", data['photo'])
        await app.send_message("@Stickers", send_smile())
        await asyncio.sleep(1)
        if text_create == '/addsticker':
            text = '–°—Ç–∏–∫–µ—Ä –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞–±–æ—Ä: ' \
                       'https://t.me/addstickers/'
            await message.answer(text + stick_name, reply_markup=back_to_menu_keyboard)
        else:
            await app.send_message("@Stickers", '/publish')
            await asyncio.sleep(1)
            await app.send_message("@Stickers", '/skip')
            await asyncio.sleep(1)
            new_stick_name = random.randint(1, 9999)
            await app.send_message("@Stickers", 'stickers_bot' + str(new_stick_name))
        await app.stop()
        get_user = engine.execute(
                    select([Users]).where(Users.user_tg ==
                                      message.from_user.id)).fetchall()
        if len(get_user) == 0:
            user = Users(user_tg=message.from_user.id)
            session.add(user)
            session.commit()
        if text_create == '/newpack':
            sticker = Stickers(stickers_tg='stickers_bot' + str(new_stick_name),
                                tg_users=message.from_user.id)
            session.add(sticker)
            session.commit()
        text = '–í–∞—à –Ω–∞–±–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: ' \
                       'https://t.me/addstickers/'
        if text_create == '/newpack':
            await message.answer(text + 'stickers_bot' + str(new_stick_name),
                                 reply_markup=back_to_menu_keyboard)

        await state.finish()




def handler_register_client(dp: Dispatcher):
    dp.register_message_handler(send_welcome, commands=['start', 'help'])
